{"version":3,"sources":["components/home.js","components/navigation.js","components/tiles.js","components/store.js","redux/actions/cartActions.js","components/contact.js","components/basket.js","App.js","serviceWorker.js","redux/reducers/cartReducer.js","index.js"],"names":["Home","useState","className","Navigation","to","height","width","src","Tiles","props","toggle","setToggle","title","image","back","front","onClick","handleClick","itemId","connect","state","items","dispatch","addToCart","id","type","console","log","map","key","imageUrl","Contact","addedItems","total","removeItem","addQuantity","subQuantity","item","quantity","handleAddQuantity","handleSubQuantity","handleRemove","App","exact","path","Boolean","window","location","hostname","match","initState","cartReducer","action","addedItem","find","existed_item","price","newTotal","itemToRemove","new_items","filter","newTotalAdd","persistConfig","storage","persistedReducer","persistReducer","store","createStore","persistor","persistStore","ReactDOM","render","loading","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.009d0ecb.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport '../styles/home.scss'\n\nconst Home = () => {\n\n    let imageList = [\n        'DSC_0163bw.jpg', \n        'DSC_0249bw.jpg',\n        'DSC_0263.jpg', \n        'skateboard_bw.jpg'\n    ];\n\n    let [currentImage, changeImage] = useState(0);\n\n    const renderImage = (src, id) => (\n    \n    <img id={`image-id-${id}`} className={`splash-image-${id}`} src={`/assets/cctv-assets/${src}`} />\n    \n    )\n    \n    // let setImageIndex = () => {\n    //     if(currentImage === 3) {\n    //         changeImage(currentImage = 0);\n    //     } else {\n    //         changeImage(currentImage += 1);\n    //     }\n    // }\n\n    // useEffect(() => {\n    //     setInterval(() => { setImageIndex() }, 4000)\n    // }, []);\n\n    return (\n        <div className=\"home-wrapper\">\n            {\n                // renderImage(imageList[currentImage], currentImage)\n            }\n        </div>\n    )\n}\n\nexport default Home;","import React from 'react';\nimport '../styles/navigation.scss';\nimport { Link } from \"react-router-dom\";\n\nconst Navigation = () => {\n    return (\n    <nav className=\"nav-wrapper\">\n        <h1>CCTV Generation</h1>\n          <ul className=\"nav-list\">\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/store\">Store</Link>\n            </li>\n            <li>\n              <Link to=\"/contact\">Contact</Link>\n            </li>\n            <li>\n              <Link to=\"/basket\"><img height=\"20px\" width=\"20px\" src=\"/assets/shopping-cart.png\"/></Link>\n            </li>\n          </ul>\n    </nav>\n    )\n}\n\nexport default Navigation;","import React, { useState } from 'react';\nimport '../styles/tiles.scss';\n\nconst Tiles = ({ ...props }) => {\n    \n    const [toggle, setToggle] = useState(false);\n\n\n    return (\n        <div className=\"tiles-wrapper\" >\n            <h3 className=\"tile-title\">{props.title}</h3>\n            <img className=\"tile-image\" \n                src={toggle ? props.image.back : props.image.front} \n                onClick={() => setToggle(!toggle)}/>\n            <button className=\"add-basket\"\n                onClick={() => props.handleClick(props.itemId)}\n            >Add to basket</button>\n        </div>\n    )\n}\n\nexport default Tiles;","import React from 'react';\nimport Tiles from './tiles';\nimport '../styles/store.scss';\nimport { connect } from 'react-redux';\nimport { addToCart } from '../redux/actions/cartActions';\n\n\nconst Store = ({ items, ...props }) => {\n\n    console.log(props);\n    const RenderTiles = () => {\n            return items.map((image, id) => <Tiles key={id} handleClick={props.addToCart} itemId={id} title={image.title} image={image.imageUrl} />) \n    }\n\n    return (\n        <div className=\"store-wrapper\">\n            {\n                RenderTiles()\n            }\n        </div>\n    )\n}\n\nconst mapStateToProps = (state)=>{\n    return {\n      items: state.items\n    }\n  }\nconst mapDispatchToProps= (dispatch)=>{\n    return{\n        addToCart: (id)=>{dispatch(addToCart(id))}\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Store);","\n//ACTIONS ARE HERE --> SHOULD GO IN THEIR OWN FILES\nexport const ADD_TO_CART = 'ADD_TO_CART'\nexport const REMOVE_ITEM = 'REMOVE_ITEM'\nexport const SUB_QUANTITY = 'SUB_QUANTITY'\nexport const ADD_QUANTITY = 'ADD_QUANTITY'\n\n\n//ACTION CREATORS ARE HERE\nexport const addToCart = (id) =>{\n    return{\n        type: ADD_TO_CART,\n        id \n    }\n}\n\nexport const removeItem = id => {\n    return {\n        type: REMOVE_ITEM,\n        id\n    }\n}\n\nexport const addQuantity = id => {\n    return {\n        type: ADD_QUANTITY,\n        id\n    }\n}\n\nexport const subQuantity = id => {\n    return {\n        type: SUB_QUANTITY,\n        id\n    }\n}","import React from 'react';\nimport '../styles/contact.scss'\n\n\nconst Contact = () => {\n\n    return (\n        <div className=\"contact-wrapper\">\n            CCTV CONTACT PAGE\n        </div>\n    )\n}\n\nexport default Contact;","import React from 'react';\nimport { connect } from 'react-redux';\nimport '../styles/basket.scss';\nimport { removeItem, addQuantity, subQuantity } from '../redux/actions/cartActions';\n\nconst Basket = ({ ...props }) => {\n    const handleRemove = (id) => {\n        props.removeItem(id);\n    }\n\n    const handleAddQuantity = (id) => {\n        props.addQuantity(id)\n    }\n\n    const handleSubQuantity = (id) => {\n        props.subQuantity(id)\n    }\n    \n    const renderItems = () => {\n        console.log('props', props);\n        return props.items.map((item, id) => (\n        <div key={id} className=\"basket-item-wrapper\">\n            <img className=\"basket-item\" src={item.imageUrl.front} />\n            <div>{props.items[id].quantity}</div>\n            <button className=\"button-add\" onClick={() => handleAddQuantity(item.id)}>+</button>\n            <button className=\"button-remove\" onClick={() => handleSubQuantity(item.id)}>-</button>\n            <button className=\"button-delete\" onClick={() => handleRemove(item.id)}>Remove from basket</button>\n        </div>\n        ))\n    }\n\n    return (\n        <div className=\"basket-wrapper\">\n            {\n                renderItems()\n            }\n        <div>Your total comes to: {props.total} Gazzer Dollars</div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state)=>{\n    console.log('MSTP', state);\n    return{\n        items: state.addedItems,\n        total: state.total\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        removeItem: (id) => { dispatch(removeItem(id)) },\n        addQuantity: (id) => { dispatch(addQuantity(id)) },\n        subQuantity: (id) => { dispatch(subQuantity(id)) }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Basket);","import React from 'react';\nimport './App.scss';\nimport Home from './components/home';\nimport Navigation from './components/navigation';\nimport Store from './components/store';\nimport Contact from './components/contact';\nimport Basket from './components/basket';\nimport { Switch, Route, BrowserRouter as Router } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Navigation />\n        <Switch>\n          <Route exact path=\"/\">\n              <Home />\n          </Route>\n          <Route path=\"/store\">\n              <Store />\n          </Route>\n          <Route path=\"/contact\">\n              <Contact />\n          </Route>\n          <Route path=\"/basket\">\n              <Basket />\n          </Route>\n        </Switch>\n      </Router>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ADD_TO_CART } from '../actions/cartActions';\nimport { REMOVE_ITEM } from '../actions/cartActions';\nimport { SUB_QUANTITY } from '../actions/cartActions';\nimport { ADD_QUANTITY } from '../actions/cartActions';\n\n \nconst Items = [\n    {\n        \"title\":\"T-Shirt\",\n        \"imageUrl\": {\n            \"front\": \"/assets/cctv-assets/front.jpg\",\n            \"back\": \"/assets/cctv-assets/back.jpg\"\n        },\n        \"id\": 0,\n        \"price\": 69\n    },\n    {\n        \"title\":\"T-Shirt\",\n        \"imageUrl\": {\n            \"front\": \"/assets/cctv-assets/front.jpg\",\n            \"back\": \"/assets/cctv-assets/back.jpg\"\n        },\n        \"id\": 1,\n        \"price\": 69\n    },\n    {\n        \"title\":\"T-Shirt\",\n        \"imageUrl\": {\n            \"front\": \"/assets/cctv-assets/front.jpg\",\n            \"back\": \"/assets/cctv-assets/back.jpg\"\n        },\n        \"id\": 2,\n        \"price\": 69\n    },\n    {\n        \"title\":\"T-Shirt\",\n        \"imageUrl\": {\n            \"front\": \"/assets/cctv-assets/front.jpg\",\n            \"back\": \"/assets/cctv-assets/back.jpg\"\n        },\n        \"id\": 3,\n        \"price\": 69\n    },\n    {\n        \"title\":\"T-Shirt\",\n        \"imageUrl\": {\n            \"front\": \"/assets/cctv-assets/front.jpg\",\n            \"back\": \"/assets/cctv-assets/back.jpg\"\n        },\n        \"id\": 4,\n        \"price\": 69\n    },\n    {\n        \"title\":\"T-Shirt\",\n        \"imageUrl\": {\n            \"front\": \"/assets/cctv-assets/front.jpg\",\n            \"back\": \"/assets/cctv-assets/back.jpg\"\n        },\n        \"id\": 5,\n        \"price\": 69\n    }\n]\n\n\nconst initState = {\n    items: Items,\n    addedItems: [],\n    total: 0\n}\n\nconst cartReducer = (state = initState, action) => {\n    let addedItem = state.items.find(item => item.id === action.id);\n    switch(action.type) {\n        \n        case ADD_TO_CART:\n\n            let existed_item = state.addedItems.find(item => action.id === item.id);\n\n            if(existed_item) {\n                addedItem.quantity += 1;\n                return {\n                    ...state,\n                    total: state.total + addedItem.price\n                } \n            } else {\n                addedItem.quantity = 1;\n                let newTotal = state.total + addedItem.price\n                return {\n                    ...state,\n                    addedItems: [...state.addedItems, addedItem],\n                    total: newTotal\n                }\n        };\n\n        case REMOVE_ITEM:\n            let itemToRemove = state.addedItems.find(item => action.id === item.id)\n            let new_items = state.addedItems.filter(item => action.id !== item.id)\n            console.log('new_items', new_items);\n            let newTotal = state.total - (itemToRemove.price *  itemToRemove.quantity)\n            addedItem.quantity = 0;\n            return {\n                ...state,\n                addedItems: new_items,\n                total: newTotal\n            }\n\n        case ADD_QUANTITY:\n            addedItem.quantity += 1;\n            let newTotalAdd= state.total + addedItem.price;\n            return {\n                ...state,\n                addedItems: [...state.addedItems],\n                total: newTotalAdd\n            }\n        case SUB_QUANTITY:\n\n            if(addedItem.quantity === 1) {\n                let new_items = state.addedItems.filter(item => item.id !== action.id)\n                let newTotal = state.total - addedItem.price\n                return {\n                    ...state,\n                    addedItems: new_items,\n                    total: newTotal\n                }\n            } else {\n                addedItem.quantity -= 1;\n                let newTotal = state.total - addedItem.price;\n                return {\n                    ...state,\n                    addedItems: [...state.addedItems],\n                    total: newTotal                \n                }\n            }\n            \n        default:\n            return state;\n        \n    }\n}\n\nexport default cartReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport cartReducer from './redux/reducers/cartReducer';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\n\nconst persistConfig = {\n    key: 'root',\n    storage,\n  }\n \nconst persistedReducer = persistReducer(persistConfig, cartReducer)\n\n\nlet store = createStore(persistedReducer);\nlet persistor = persistStore(store)\n\nReactDOM.render(\n    <Provider store={store}>\n        <PersistGate loading={null} persistor={persistor}>\n            <App />\n        </PersistGate>\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}